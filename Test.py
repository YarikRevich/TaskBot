import telebot
from telebot import types
import pymongo
from pymongo import MongoClient
import time
from datetime import datetime
import datetime
import threading
import os
import re

bot = telebot.TeleBot("1074387650:AAERuC9d1NEfVli6pd8NL5KYz6uj4C96uPg")

#Connecting to Mongo


client = MongoClient("localhost",27017)
db = client["taskbot"]
collection = db["autorization"]
Notes = []
site = db["tasksite"]



@bot.message_handler(commands = ["start"])

#The calling of the main menu and start message

def menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    stuff1 = types.KeyboardButton("üîì–ê–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è")
    stuff2 = types.KeyboardButton("üìù–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è")
    markup.add(stuff1,stuff2)

########################################################################
    #Global Variables
    
    global Check_time
    global checker_v2
    global checker_v3
    global checker_v4
    global checker
    global Check
    global user_email


    user_email = {"{0.id}".format(message.from_user):0}
    Check = {"{0.id}".format(message.from_user):0}
    Check_time = {"{0.id}".format(message.from_user):0}
 


    checker = threading.Timer(60, exception_remind, [message])
    checker_v2 = threading.Timer(60, exception_remind, [message])
    checker_v3 = threading.Timer(60, exception_remind, [message])
    checker_v4 = threading.Timer(60, exception_remind, [message])


########################################################################

    
    bot.send_message(message.chat.id,"üî•–í—ñ—Ç–∞—é —É TaskBot" + "\n" + "–î–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –ê–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è",reply_markup=markup)


@bot.message_handler(content_types = ["text"])

#The controlling of all buttons in the menu

def autorization(message,*args, **kwargs):
    

    #The reaction on the pressing of the button "Sign up"

    if message.text == ("üìù–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è"):
        print(args)
        Check["{0.id}".format(message.from_user)] = 0
        try:
            find = collection.find({"_id":"{0.id}".format(message.from_user)})
            w = [i for i in find]
        
            if {"_id":"{0.id}".format(message.from_user)} in w:
                bot.send_message(message.chat.id,"‚õîÔ∏è–í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ")
       
            else:
                collection.insert_one({"_id":"{0.id}".format(message.from_user)})
                bot.send_message(message.chat.id,"‚úÖ–í—ñ—Ç–∞—é,–≤–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–ª–∏—Å—è")
        except pymongo.errors.DuplicateKeyError:
            bot.send_message(message.chat.id,"‚õîÔ∏è–í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –∞–±–æ —Ä–æ–±–∏—Ç–µ –±–∞–≥–∞—Ç–æ –∑–∞–ø—Ä–æ—Å—ñ–≤...")	

    #The reaction on the pressing of the button "Sign in"

    elif message.text == ("üîì–ê–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è"):
        Check["{0.id}".format(message.from_user)] = 0
        
        find = collection.find({"_id":"{0.id}".format(message.from_user)})
        a = [i for i in find]
        if len(a) == 0:
            bot.send_message(message.chat.id,"‚ùå–í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ")
        else:           
            bot.send_message(message.chat.id,"‚ö†Ô∏è–ó–∞—á–µ–∫–∞–π—Ç–µ....")
            time.sleep(1.5)
            for check in collection.find({"_id":"{0.id}".format(message.from_user)}):
                try:
                    if check["connected"] == True:
                        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                        part1 = types.KeyboardButton("üóí–ó—Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Å")
                        part2 = types.KeyboardButton("üîé–ü—Ä–æ–¥–∏–≤–∏—Ç–∏—Å—è —É—Å—ñ –∑–∞–ø–∏—Å–∏")
                        part3 = types.KeyboardButton("üîî–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è")
                        part4 = types.KeyboardButton("‚ùå–í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç")
                        part5 = types.KeyboardButton("–ê–∫–∫–∞—É–Ω—Ç TaskBot")
                        markup.add(part1,part2,part3,part4,part5)
                        bot.send_message(message.chat.id,"‚úÖ–í—ñ—Ç–∞—é,–≤–∏ —É–≤—ñ–π—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É",reply_markup=markup)
                except KeyError:
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    part1 = types.KeyboardButton("üóí–ó—Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Å")
                    part2 = types.KeyboardButton("üîé–ü—Ä–æ–¥–∏–≤–∏—Ç–∏—Å—è —É—Å—ñ –∑–∞–ø–∏—Å–∏")
                    part3 = types.KeyboardButton("üîî–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è")
                    part4 = types.KeyboardButton("‚ùå–í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç")
                    part5 = types.KeyboardButton("–ü—Ä–∏–≤'—è–∑–∞—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç")
                    markup.add(part1,part2,part3,part4,part5)
                    bot.send_message(message.chat.id,"‚úÖ–í—ñ—Ç–∞—é,–≤–∏ —É–≤—ñ–π—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É",reply_markup=markup)

    elif message.text == "–ü—Ä–∏–≤'—è–∑–∞—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç":
        msg = bot.send_message(message.chat.id,"–í–≤–µ–¥—ñ—Ç—å email")
        bot.register_next_step_handler(msg,connect_email)



    #The reaction on the pressing on the button "Delete the accaunt"

    elif message.text == ("‚ùå–í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç"):
        Check["{0.id}".format(message.from_user)] = 0
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        stuff1 = types.KeyboardButton("üîì–ê–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è")
        stuff2 = types.KeyboardButton("üìù–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è")
        markup.add(stuff1,stuff2)
        bot.send_message(message.chat.id,"‚úÖ" + "{0.first_name}".format(message.from_user) + " " + "–≤–∏ –≤–∏–¥–∞–ª–∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç",reply_markup=markup)
        collection.find_one_and_delete({"_id":"{0.id}".format(message.from_user)})


    #The reaction on the pressing of the button "Reminders"
    
    elif message.text == ("üîî–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è"):
        msg = bot.send_message(message.chat.id,"‚úèÔ∏è–ù–∞–ø–∏—à—ñ—Ç—å,—â–æ –í–∞–º –Ω–∞–≥–∞–¥–∞—Ç–∏")
        Check["{0.id}".format(message.from_user)] = 0
        global check_time_reminder
        check_time_reminder = threading.Timer(60, check_func_reminder, [message])
        check_time_reminder.start()

        #Comming to the next function "reminders"

        bot.register_next_step_handler(msg, reminders)
        
        
    elif message.text == ("–ê–∫–∫–∞—É–Ω—Ç TaskBot"):
        for email_and_password in collection.find({"_id":"{0.id}".format(message.from_user)}):
            try:
                if email_and_password["connected"] == True:
                    markup = types.InlineKeyboardMarkup(row_width=1)
                    stuff = types.InlineKeyboardButton("C—É–º–∞—Ä–Ω–∞ –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω—ñ—Å—Ç—å",callback_data="Sum")
                    stuff1 = types.InlineKeyboardButton("–£—Å—ñ –∑–∞–ø–∏—Å–∞–Ω—ñ –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω–æ—Å—Ç—ñ",callback_data="Loan")
                    stuff2 = types.InlineKeyboardButton("–í—ñ–¥–≤'—è–∑–∞—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç",callback_data="unconnect")
                    markup.add(stuff,stuff1,stuff2)
                    bot.send_message(message.chat.id,"–û—Å—å —É—Å—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –æ–ø—Ü—ñ–π",reply_markup=markup)
            except KeyError:
                bot.send_message(message.chat.id,"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞üòø")
        

    #The reaction on the pressing of the button "Look at all notes"

    elif message.text == ("üîé–ü—Ä–æ–¥–∏–≤–∏—Ç–∏—Å—è —É—Å—ñ –∑–∞–ø–∏—Å–∏"):
        Check["{0.id}".format(message.from_user)] = 0
        try:
            note = collection.find({"_id":"{0.id}".format(message.from_user)})
            len_list = [note]
            if len(len_list) == 0:
                bot.send_message(message.chat.id,"‚õîÔ∏è–í–∏ –Ω–µ –º–∞—î—Ç–µ –∑–∞–ø–∏—Å—ñ–≤")
            else:
                len_list.clear()
                for i in note:
                    k = i["notes"] 
                    if len(k) == 0:
                        bot.send_message(message.chat.id,"‚õîÔ∏è–í–∏ –Ω–µ –º–∞—î—Ç–µ –∑–∞–ø–∏—Å—ñ–≤")    
                    else:      
                        for s in k:
                            w = s.get("{0.id}".format(message.from_user))                      
                            main = list()
                            main.append(w)
                            o = [i for i in main if i is not None]
                            for i in o:
                                bot.send_message(message.chat.id,i)
        except KeyError:
            bot.send_message(message.chat.id,"‚õîÔ∏è–í–∏ –Ω–µ –º–∞—î—Ç–µ –∑–∞–ø–∏—Å—ñ–≤")

        
                
    #The reaction on the pressing of the button "Make the note"   

    elif message.text == ("üóí–ó—Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Å"):
        msg = bot.send_message(message.chat.id,"üñç–ú–æ–∂–µ—Ç–µ —Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Å" + "\n" + "‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è–ù–µ–±—Ö—ñ–¥–Ω–æ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å —É —Ç–∞–∫–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ" + "\n" + "--------------------------" + "\n" + "1)..........." + "\n" + "2)..........." + "\n" + "3)..........." + "\n" + "--------------------------")
        global check_time
        check_time = threading.Timer(60, check_func_notes, [message])
        ra = re.findall(r'started',str(check_time))
        print(ra)
        check_time.start()
        print(check_time)
        r = re.findall(r'started',str(check_time))
        print(r)
        
        

        
        #Comming to the next function "notes"

        bot.register_next_step_handler(msg, notes)
    else:
        bot.send_message(message.chat.id,"–í–∏–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç —ñ–∑ –º–µ–Ω—éüòâ")

def notes(message):
    
    check_time.cancel()
   

    Notes.append({"{0.id}".format(message.from_user):message.text + "\n" + "–ß–∞—Å –∑–∞–ø–∏—Å—É" + " " +  str(datetime.date.today())})         
    collection.replace_one({"_id":"{0.id}".format(message.from_user)}, {"_id":"{0.id}".format(message.from_user),"notes":Notes})
    msg = bot.send_message(message.chat.id,"‚úÖ–í–∏ –∑—Ä–æ–±–∏–ª–∏ –∑–∞–ø–∏—Å")
    bot.register_next_step_handler(msg, autorization)  



def connect_email(message):
    user_email = message.text
    if site.find_one({"_id":user_email}) != None:
        msg = bot.send_message(message.chat.id,"–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å")
        bot.register_next_step_handler(msg, connect_password, user_email) 
    else:
        bot.send_message(message.chat.id,"–ê–∫–∫–∞—É–Ω—Ç—É –∑ —Ç–∞–∫–∏–º email –Ω–µ —ñ—Å–Ω—É—î")

def connect_password(message,email):
    if site.find_one({"_id":email,"password":message.text}) != None:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        part1 = types.KeyboardButton("üóí–ó—Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Å")
        part2 = types.KeyboardButton("üîé–ü—Ä–æ–¥–∏–≤–∏—Ç–∏—Å—è —É—Å—ñ –∑–∞–ø–∏—Å–∏")
        part3 = types.KeyboardButton("üîî–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è")
        part4 = types.KeyboardButton("‚ùå–í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç")
        part5 = types.KeyboardButton("–ê–∫–∫–∞—É–Ω—Ç TaskBot")
        markup.add(part1,part2,part3,part4,part5)
        bot.send_message(message.chat.id,"–í—ñ—Ç–∞—é,–≤–∏ –ø—Ä–∏–≤'—è–∑–∞–ª–∏ –±–æ—Ç–∞ –¥–æ –∞–∫–∫–∞—É–Ω—Ç—É —Å–∞–π—Ç—É TaskBot",reply_markup=markup)
        collection.update({"_id":"{0.id}".format(message.from_user)},{"$set":{"connected":True,"email":email,"password":message.text}})
        site.update({"_id":email},{"$set":{"connected":True,"connected_name":"{0.first_name}".format(message.from_user),"connected_last_name":"{0.last_name}".format(message.from_user)}})
    else:
        bot.send_message(message.chat.id,"–ü–∞—Ä–æ–ª—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π")
    

def reminders(message):

    #The reminder adding to the database
     
    try: 
        info = collection.find({"_id":"{0.id}".format(message.from_user)})
        for i in info:
            k = i["reminders"]          
            if len(k) >= 1:
                markup = types.InlineKeyboardMarkup()
                stuff = types.InlineKeyboardButton(text="–í–∏–¥–∞–ª–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è",callback_data="delete")
                markup.add(stuff)
                bot.send_message(message.chat.id,"‚õîÔ∏è–í–∏ –≤–∂–µ –º–∞—î—Ç–µ –∞–∫—Ç–∏–≤–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è",reply_markup=markup)
                check_time_reminder.cancel()
            else:
                check_time_reminder.cancel()
                collection.update({"_id":"{0.id}".format(message.from_user)}, {"_id":"{0.id}".format(message.from_user),"notes":Notes,"reminders":message.text})
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                special = types.KeyboardButton("üí≠–í–∏–±—Ä–∞—Ç–∏ —Å–≤—ñ–π —á–∞—Å")
                stuff1 = types.KeyboardButton("üïê15 —Ö–≤–∏–ª–∏–Ω")
                stuff2 = types.KeyboardButton("üïñ30 —Ö–≤–∏–ª–∏–Ω")
                stuff3 = types.KeyboardButton("üïï1 –≥–æ–¥–∏–Ω–∞")
                stuff4 = types.KeyboardButton("üïî2 –≥–æ–¥–∏–Ω–∏")
                stuff5 = types.KeyboardButton("üïì4 –≥–æ–¥–∏–Ω–∏")
                stuff6 = types.KeyboardButton("üïí6 –≥–æ–¥–∏–Ω")
                stuff7 = types.KeyboardButton("üïë12 –≥–æ–¥–∏–Ω")
                stuff8 = types.KeyboardButton("üïó24 –≥–æ–¥–∏–Ω–∏")
                markup.add(special,stuff1,stuff2,stuff3,stuff4,stuff5,stuff6,stuff7,stuff8)
                mess = bot.send_message(message.chat.id,"‚è∞–ö–æ–ª–∏ –í–∞–º —Ü–µ –Ω–∞–≥–∞–¥–∞—Ç–∏",reply_markup=markup) 
                bot.register_next_step_handler(mess, name_reminder)
    except KeyError:
        check_time_reminder.cancel() 
        collection.replace_one({"_id":"{0.id}".format(message.from_user)}, {"_id":"{0.id}".format(message.from_user),"notes":Notes,"reminders":message.text})
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        special = types.KeyboardButton("üí≠–í–∏–±—Ä–∞—Ç–∏ —Å–≤—ñ–π —á–∞—Å")
        stuff1 = types.KeyboardButton("üïê15 —Ö–≤–∏–ª–∏–Ω")
        stuff2 = types.KeyboardButton("üïñ30 —Ö–≤–∏–ª–∏–Ω")
        stuff3 = types.KeyboardButton("üïï1 –≥–æ–¥–∏–Ω–∞")
        stuff4 = types.KeyboardButton("üïî2 –≥–æ–¥–∏–Ω–∏")
        stuff5 = types.KeyboardButton("üïì4 –≥–æ–¥–∏–Ω–∏")
        stuff6 = types.KeyboardButton("üïí6 –≥–æ–¥–∏–Ω")
        stuff7 = types.KeyboardButton("üïë12 –≥–æ–¥–∏–Ω")
        stuff8 = types.KeyboardButton("üïó24 –≥–æ–¥–∏–Ω–∏")
        markup.add(special,stuff1,stuff2,stuff3,stuff4,stuff5,stuff6,stuff7,stuff8)
        mess = bot.send_message(message.chat.id,"‚è∞–ö–æ–ª–∏ –í–∞–º —Ü–µ –Ω–∞–≥–∞–¥–∞—Ç–∏",reply_markup=markup)           
        bot.register_next_step_handler(mess, name_reminder)

    

def name_reminder(message):

    #the reaction on the pressing of the button "15 minutes"

    if message.text == ("üí≠–í–∏–±—Ä–∞—Ç–∏ —Å–≤—ñ–π —á–∞—Å"):
        msg = bot.send_message(message.chat.id,"üìù–ù–∞–ø–∏—à—ñ—Ç—å —á–∞—Å –∫–æ–ª–∏ –í–∞–º –Ω–∞–≥–∞–¥–∞—Ç–∏ –≤–∞—à –∑–∞–ø–∏—Å —É —Ç–∞–∫–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ‚ùóÔ∏è" + "\n" + "\n" + "<b>–†—ñ–∫.–ú—ñ—Å—è—Ü—å.–î–µ–Ω—å –ì–æ–¥–∏–Ω–∞:–•–≤–∏–ª–∏–Ω–∏:–°–µ–∫—É–Ω–¥–∏</b>",parse_mode="html")
        global check_time_reminder_own
        check_time_reminder_own = threading.Timer(60, check_func_reminder_own, [message])
        check_time_reminder_own.start()
        bot.register_next_step_handler(msg, time_reminders_own)




    if message.text == ("üïê15 —Ö–≤–∏–ª–∏–Ω"):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        part1 = types.KeyboardButton("üóí–ó—Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Å")
        part2 = types.KeyboardButton("üîé–ü—Ä–æ–¥–∏–≤–∏—Ç–∏—Å—è —É—Å—ñ –∑–∞–ø–∏—Å–∏")
        part3 = types.KeyboardButton("üîî–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è")
        part4 = types.KeyboardButton("‚ùå–í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç")
        markup.add(part1,part2,part3,part4)
        bot.send_message(message.chat.id,"‚úÖ–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑—Ä–æ–±–ª–µ–Ω–µ!",reply_markup=markup)
        
        #The starting of the timer on 15 minutes
        
        timerr = threading.Timer(30*30, main_remind, [message])
        timerr.start()
        
        
    #the reaction on the pressing of the button "30 minutes"        
            
    if message.text == ("üïñ30 —Ö–≤–∏–ª–∏–Ω"):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        part1 = types.KeyboardButton("üóí–ó—Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Å")
        part2 = types.KeyboardButton("üîé–ü—Ä–æ–¥–∏–≤–∏—Ç–∏—Å—è —É—Å—ñ –∑–∞–ø–∏—Å–∏")
        part3 = types.KeyboardButton("üîî–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è")
        part4 = types.KeyboardButton("‚ùå–í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç")
        markup.add(part1,part2,part3,part4)
        bot.send_message(message.chat.id,"‚úÖ–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑—Ä–æ–±–ª–µ–Ω–µ!",reply_markup=markup)
        
        #The starting of the timer on 30 minutes
        
        timerr = threading.Timer(1800, main_remind, [message])
        timerr.start()

    #the reaction on the pressing of the button "1 hour"

    if message.text == ("üïï1 –≥–æ–¥–∏–Ω–∞"):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        part1 = types.KeyboardButton("üóí–ó—Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Å")
        part2 = types.KeyboardButton("üîé–ü—Ä–æ–¥–∏–≤–∏—Ç–∏—Å—è —É—Å—ñ –∑–∞–ø–∏—Å–∏")
        part3 = types.KeyboardButton("üîî–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è")
        part4 = types.KeyboardButton("‚ùå–í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç")
        markup.add(part1,part2,part3,part4)
        bot.send_message(message.chat.id,"‚úÖ–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑—Ä–æ–±–ª–µ–Ω–µ!",reply_markup=markup)
        
        #The starting of the timer on 1 hour
        
        timerr = threading.Timer(3600, main_remind, [message])
        timerr.start()

    #the reaction on the pressing of the button "2 hours"

    if message.text == ("üïî2 –≥–æ–¥–∏–Ω–∏"):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        part1 = types.KeyboardButton("üóí–ó—Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Å")
        part2 = types.KeyboardButton("üîé–ü—Ä–æ–¥–∏–≤–∏—Ç–∏—Å—è —É—Å—ñ –∑–∞–ø–∏—Å–∏")
        part3 = types.KeyboardButton("üîî–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è")
        part4 = types.KeyboardButton("‚ùå–í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç")
        markup.add(part1,part2,part3,part4)
        bot.send_message(message.chat.id,"‚úÖ–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑—Ä–æ–±–ª–µ–Ω–µ!",reply_markup=markup)
        
        #The starting of the timer on 2 hours
        
        timerr = threading.Timer(7200, main_remind, [message])
        timerr.start()

    #the reaction on the pressing of the button "4 hours"

    if message.text == ("üïì4 –≥–æ–¥–∏–Ω–∏"):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        part1 = types.KeyboardButton("üóí–ó—Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Å")
        part2 = types.KeyboardButton("üîé–ü—Ä–æ–¥–∏–≤–∏—Ç–∏—Å—è —É—Å—ñ –∑–∞–ø–∏—Å–∏")
        part3 = types.KeyboardButton("üîî–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è")
        part4 = types.KeyboardButton("‚ùå–í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç")
        markup.add(part1,part2,part3,part4)
        bot.send_message(message.chat.id,"‚úÖ–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑—Ä–æ–±–ª–µ–Ω–µ!",reply_markup=markup)
        
        #The starting of the timer on 4 hours
        
        timerr = threading.Timer(14400, main_remind, [message])
        timerr.start()

    #the reaction on the pressing of the button "6 hours"

    if message.text == ("üïí6 –≥–æ–¥–∏–Ω"):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        part1 = types.KeyboardButton("üóí–ó—Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Å")
        part2 = types.KeyboardButton("üîé–ü—Ä–æ–¥–∏–≤–∏—Ç–∏—Å—è —É—Å—ñ –∑–∞–ø–∏—Å–∏")
        part3 = types.KeyboardButton("üîî–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è")
        part4 = types.KeyboardButton("‚ùå–í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç")
        markup.add(part1,part2,part3,part4)
        bot.send_message(message.chat.id,"‚úÖ–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑—Ä–æ–±–ª–µ–Ω–µ!",reply_markup=markup)
        
        #The starting of the timer 6 hours

        timerr = threading.Timer(21600, main_remind, [message])
        timerr.start()

    #the reaction on the pressing of the button "12 hours"

    if message.text == ("üïë12 –≥–æ–¥–∏–Ω"):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        part1 = types.KeyboardButton("üóí–ó—Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Å")
        part2 = types.KeyboardButton("üîé–ü—Ä–æ–¥–∏–≤–∏—Ç–∏—Å—è —É—Å—ñ –∑–∞–ø–∏—Å–∏")
        part3 = types.KeyboardButton("üîî–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è")
        part4 = types.KeyboardButton("‚ùå–í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç")
        markup.add(part1,part2,part3,part4)
        bot.send_message(message.chat.id,"‚úÖ–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑—Ä–æ–±–ª–µ–Ω–µ!",reply_markup=markup)
        
        #The starting of the timer on 12 hours

        timerr = threading.Timer(43200, main_remind, [message])
        timerr.start()

    #the reaction on the pressing of the button "24 hours"

    if message.text == ("üïó24 –≥–æ–¥–∏–Ω–∏"):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        part1 = types.KeyboardButton("üóí–ó—Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Å")
        part2 = types.KeyboardButton("üîé–ü—Ä–æ–¥–∏–≤–∏—Ç–∏—Å—è —É—Å—ñ –∑–∞–ø–∏—Å–∏")
        part3 = types.KeyboardButton("üîî–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è")
        part4 = types.KeyboardButton("‚ùå–í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç")
        markup.add(part1,part2,part3,part4)
        bot.send_message(message.chat.id,"‚úÖ–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑—Ä–æ–±–ª–µ–Ω–µ!",reply_markup=markup)
        
        #The starting of the timer on 24 hours
        
        timerr = threading.Timer(294**2, main_remind, [message])
        timerr.start()

#Called function for sending the written reminder   

def main_remind(message):
    find = collection.find({"_id":"{0.id}".format(message.from_user)})
    
    for whole_list in find:
            bot.send_message(message.chat.id,"‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è" + "–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è" + "\n" + "\n" + "\n" +  whole_list["reminders"])

            collection.update({"_id":"{0.id}".format(message.from_user)}, {"_id":"{0.id}".format(message.from_user),"notes":Notes})


###########################################################################################################################################
#Functions for the checking of the activity


def check_func_reminder(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    part1 = types.KeyboardButton("üóí–ó—Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Å")
    part2 = types.KeyboardButton("üîé–ü—Ä–æ–¥–∏–≤–∏—Ç–∏—Å—è —É—Å—ñ –∑–∞–ø–∏—Å–∏")
    part3 = types.KeyboardButton("üîî–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è")
    part4 = types.KeyboardButton("‚ùå–í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç")
    markup.add(part1,part2,part3,part4)
    msg = bot.send_message(message.chat.id,"üò≠–í–∏ –Ω–µ –≤—Å—Ç–∏–≥–ª–∏ –∑—Ä–æ–±–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è,—è–∫—â–æ —Ö–æ—á–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ —Å–ø—Ä–æ–±—É,–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É" + "\n" + "         " + "<b>–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è</b>",parse_mode="html",reply_markup=markup)
    bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
    bot.register_next_step_handler(msg, autorization)   






def exception_remind(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    part1 = types.KeyboardButton("üóí–ó—Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Å")
    part2 = types.KeyboardButton("üîé–ü—Ä–æ–¥–∏–≤–∏—Ç–∏—Å—è —É—Å—ñ –∑–∞–ø–∏—Å–∏")
    part3 = types.KeyboardButton("üîî–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è")
    part4 = types.KeyboardButton("‚ùå–í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç")
    markup.add(part1,part2,part3,part4)
    msg = bot.send_message(message.chat.id,"üò≠–í–∏ –Ω–µ –≤—Å—Ç–∏–≥–ª–∏ –∑—Ä–æ–±–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è,—è–∫—â–æ —Ö–æ—á–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ —Å–ø—Ä–æ–±—É,–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É" + "\n" + "         " + "<b>–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è</b>",parse_mode="html",reply_markup=markup)   
    collection.replace_one({"_id":"{0.id}".format(message.from_user)}, {"_id":"{0.id}".format(message.from_user),"notes":Notes})
    bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
    bot.register_next_step_handler(msg, autorization)   
    






def check_func_reminder_own(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    part1 = types.KeyboardButton("üóí–ó—Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Å")
    part2 = types.KeyboardButton("üîé–ü—Ä–æ–¥–∏–≤–∏—Ç–∏—Å—è —É—Å—ñ –∑–∞–ø–∏—Å–∏")
    part3 = types.KeyboardButton("üîî–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è")
    part4 = types.KeyboardButton("‚ùå–í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç")
    markup.add(part1,part2,part3,part4)
    msg = bot.send_message(message.chat.id,"üò≠–í–∏ –Ω–µ –≤—Å—Ç–∏–≥–ª–∏ –∑—Ä–æ–±–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è,—è–∫—â–æ —Ö–æ—á–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ —Å–ø—Ä–æ–±—É,–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É" + "\n" + "         " + "<b>–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è</b>",parse_mode="html",reply_markup=markup)
    bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
    bot.register_next_step_handler(msg, autorization)   
    




def check_func_notes(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    part1 = types.KeyboardButton("üóí–ó—Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Å")
    part2 = types.KeyboardButton("üîé–ü—Ä–æ–¥–∏–≤–∏—Ç–∏—Å—è —É—Å—ñ –∑–∞–ø–∏—Å–∏")
    part3 = types.KeyboardButton("üîî–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è")
    part4 = types.KeyboardButton("‚ùå–í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç")
    markup.add(part1,part2,part3,part4)
    msg = bot.send_message(message.chat.id,"üò≠–í–∏ –Ω–µ –≤—Å—Ç–∏–≥–ª–∏ –∑—Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Å,—è–∫—â–æ —Ö–æ—á–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ —Å–ø—Ä–æ–±—É,–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–ó—Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Å' ",reply_markup=markup)
    bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
    bot.register_next_step_handler(msg,autorization)




#######################################################################################################################################

#Function for the chacking of the rightness input of your own reminder time


def time_reminders_own(message):
    
    
    try:
        finder = r'[0-9]{4}.[0-9]{2}.[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}'
        result = re.findall(finder, message.text)
        global comparedtime_copy
        global comparedtime
        for i in result:
            
            comparedtime = i.replace(".", "").replace(":","").replace(" ", "")
            comparedtime_copy = i.replace(".", ":")
        
        
        date = datetime.datetime.now()
        comparedtime_global = date.strftime("%Y,%m,%d %H,%M,%S")
        changed_time = comparedtime_global.replace(",","").replace(" ","")
        solution = int(comparedtime) - int(changed_time)
        

        #The cancelling of all timers for the checking of the activity

        checker.cancel()
        checker_v2.cancel()
        checker_v3.cancel()
        checker_v4.cancel()
        check_time_reminder_own.cancel()

        #~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#


        if solution >= 0:
            if len(result) > 0:
                
                #The cancelling of all timers for the checking of the activity

                checker.cancel()
                checker_v2.cancel()
                checker_v3.cancel()
                checker_v4.cancel()
                check_time_reminder_own.cancel()

                #~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#


                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                part1 = types.KeyboardButton("üóí–ó—Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Å")
                part2 = types.KeyboardButton("üîé–ü—Ä–æ–¥–∏–≤–∏—Ç–∏—Å—è —É—Å—ñ –∑–∞–ø–∏—Å–∏")
                part3 = types.KeyboardButton("üîî–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è")
                part4 = types.KeyboardButton("‚ùå–í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç")
                markup.add(part1,part2,part3,part4)
                bot.send_message(message.chat.id,"‚úÖ–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑—Ä–æ–±–ª–µ–Ω–µ!",reply_markup=markup)
                

                Check_time["{0.id}".format(message.from_user)] = comparedtime_copy
                result.clear()
                timercheck = threading.Thread(target=checking_time(message))
                timercheck.start()
                timercheck.join()
                    
            else:

                #The cancelling of all timers for the checking of the activity

                checker.cancel()
                checker_v2.cancel()
                checker_v3.cancel()
                checker_v4.cancel()
                check_time_reminder_own.cancel()

                #~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#

                
                msg = bot.send_message(message.chat.id,"üò≠–í–∏ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ —á–∞—Å –∞–±–æ –¥–∞—Ç—É")
                checker.start()
                bot.register_next_step_handler(msg, time_reminders_own)

        else:

            #The cancelling of all timers for the checking of the activity

            checker.cancel()
            checker_v2.cancel()
            checker_v3.cancel()
            checker_v4.cancel()
            check_time_reminder_own.cancel()

            #~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#


            msg = bot.send_message(message.chat.id,"üòú–Ø –Ω–µ –º–æ–∂—É –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –í–∞–º –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —É –º–∏–Ω—É–ª–µ\n–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –¥–∞—Ç—É —Ç–∞ —á–∞—Å")
            checker_v2.start()
            bot.register_next_step_handler(msg, time_reminders_own)
        

    except ValueError:

        #The cancelling of all timers for the checking of the activity

        checker.cancel()
        checker_v2.cancel()
        checker_v3.cancel()
        checker_v4.cancel()
        check_time_reminder_own.cancel()

        #~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#

        
        msg = bot.send_message(message.chat.id,"üò≠–í–∏ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ —á–∞—Å –∞–±–æ –¥–∞—Ç—É")
        checker_v3.start()
        bot.register_next_step_handler(msg, time_reminders_own)

    except NameError:

        #The cancelling of all timers for the checking of the activity

        checker.cancel()
        checker_v2.cancel()
        checker_v3.cancel()
        checker_v4.cancel()
        check_time_reminder_own.cancel()

        #~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#

        msg = bot.send_message(message.chat.id,"üò≠–í–∏ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ —á–∞—Å –∞–±–æ –¥–∞—Ç—É")
        checker_v4.start()
        bot.register_next_step_handler(msg, time_reminders_own)

    except RuntimeError:
        
        #The cancelling of all timers for the checking of the activity

        checker.cancel()
        checker_v2.cancel()
        checker_v3.cancel()
        checker_v4.cancel()
        check_time_reminder_own.cancel()

        #~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#~#

        
        msg = bot.send_message(message.chat.id,"üò≠–í–∏ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ —á–∞—Å –∞–±–æ –¥–∞—Ç—É")
        checker_v3.start()
        bot.register_next_step_handler(msg, time_reminders_own)
            
            
                        
#Function for the sending message in your own time
         

def checking_time(message):
    date = datetime.datetime.now()
    global_time = date.strftime("%Y:%m:%d %H:%M:%S")
    
    try:
        if Check_time["{0.id}".format(message.from_user)] == global_time:
            mess = collection.find({"_id":"{0.id}".format(message.from_user)})
            for i in mess:
                bot.send_message(message.chat.id,"‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è" + "–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è" + "\n" + "\n" + "\n" +  i["reminders"])
                collection.replace_one({"_id":"{0.id}".format(message.from_user)}, {"_id":"{0.id}".format(message.from_user),"notes":Notes})
        else:
            remtimer = threading.Timer(1, checking_time, [message])
            remtimer.start()
    except KeyError:
        print("An error happened")



################################################################################################################################################

#Function for the deleting of your own reminder if you wanna change it 



@bot.callback_query_handler(lambda delete: delete.data=="delete")
def dele(delete):
    if delete.data == "delete":
        info = collection.find({"_id":"{0.id}".format(delete.from_user)})
        for i in info:
            try:
                if len(i["reminders"]) > 0:
                    collection.replace_one({"_id":"{0.id}".format(delete.from_user)}, {"_id":"{0.id}".format(delete.from_user),"notes":Notes})
                    bot.send_message(delete.message.chat.id,"‚úÖ–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ")
                else:
                    bot.send_message(delete.message.chat.id,"‚ùóÔ∏è–ù–µ–º–∞—î –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å")
            except KeyError:
                bot.send_message(delete.message.chat.id,"‚ùóÔ∏è–ù–µ–º–∞—î –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å")


                
@bot.callback_query_handler(lambda summ: summ.data=="Sum")
def taskbot_acc(summ):
    if summ.data == "Sum":
        for email in collection.find({"_id":"{0.id}".format(summ.from_user)}):
            user_email = email["email"]
            #user_password = email["password"]
            for data in site.find({"_id":user_email}):
                try:
                    bot.send_message(summ.message.chat.id,"–°—É–º–º–∞ –≤–∞—à–æ—ó –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω–æ—Å—Ç—ñ" + " " + "-" + " " + str(data["loan"]))      
                except KeyError:
                    bot.send_message(summ.message.chat.id,"‚ùóÔ∏è–ù–µ–º–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –í–∞—à —Å—É–º–∞—Ä–Ω–∏–π –±–æ—Ä–≥")
                    

@bot.callback_query_handler(lambda loan: loan.data == "Loan")
def taskbot_loan(loan):
    if loan.data == "Loan":
        bot.send_message(loan.message.chat.id,"–ü–µ—Ä—à–∞ –∫–æ–ª–æ–Ω–∫–∞ - '–ó–∞ —â–æ'" + "\n" + "–î—Ä—É–≥–∞ –∫–æ–ª–æ–Ω–∫–∞ - '–û–ø–∏—Å'" + "\n" + "–¢—Ä–µ—Ç—è –∫–æ–ª–æ–Ω–∫–∞ - 'C—É–º–∞ –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω–æ—Å—Ç—ñ'")
        for email_user in collection.find({"_id":"{0.id}".format(loan.from_user)}):
            user = email_user["email"]
            for info in site.find({"_id":user}):
                try:
                    for i in info["full_loan"]:
                        splited = (*i,)
                        bot.send_message(loan.message.chat.id,str(splited[0]) + " " + "|" + " " + str(splited[1]) + " " + "|" + " " + str(splited[2]))
                except KeyError:
                    bot.send_message(loan.message.chat.id,"‚ùóÔ∏è–ù–µ–º–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –≤–∞—à—ñ –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω–æ—Å—Ç—ñ")
                    
@bot.callback_query_handler(lambda unconnect: unconnect.data == "unconnect")
def taskbot_unconnect(unconnect):
    if unconnect.data == "unconnect":
        collection.update({"_id":"{0.id}".format(unconnect.from_user)},{"$unset":{"connected":"","email":"","password":""}})
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        part1 = types.KeyboardButton("üóí–ó—Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Å")
        part2 = types.KeyboardButton("üîé–ü—Ä–æ–¥–∏–≤–∏—Ç–∏—Å—è —É—Å—ñ –∑–∞–ø–∏—Å–∏")
        part3 = types.KeyboardButton("üîî–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è")
        part4 = types.KeyboardButton("‚ùå–í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç")
        part5 = types.KeyboardButton("–ü—Ä–∏–≤'—è–∑–∞—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç")
        markup.add(part1,part2,part3,part4,part5)
        bot.send_message(unconnect.message.chat.id,"–í—ñ—Ç–∞—é,–≤–∏ –≤—ñ–¥–≤'—è–∑–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç",reply_markup=markup)



###################################################################################################################################################
            
bot.polling(none_stop=True,timeout=5,interval=1)